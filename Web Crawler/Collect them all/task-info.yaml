type: edu
custom_name: Collect them all!
files:
- name: src/crawler/ApplicationRunner.java
  visible: true
  text: |
    package crawler;


    public class ApplicationRunner {
        public static void main(String[] args) {
            new WebCrawler();
        }
    }
  learner_created: false
- name: src/crawler/WebCrawler.java
  visible: true
  text: |-
    package crawler;

    import javax.swing.*;

    public class WebCrawler extends JFrame {
        public WebCrawler() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
        }
    }
  learner_created: false
- name: test/PageContent.java
  visible: false
  text: "import java.util.HashMap;\nimport java.util.Map;\n\npublic class PageContent\
    \ {\n    private Map<String, String> linksNContent;\n    private Map<String, String>\
    \ linksNTitles;\n    private Map<String, Integer> linksNSubLinks;\n    public\
    \ PageContent(){\n        linksNContent = new HashMap<>();\n        linksNTitles\
    \ = new HashMap<>();\n        linksNSubLinks = new HashMap<>();\n        initPageContent();\n\
    \    }\n    \n    private void initPageContent() {\n        //Links\n        String\
    \ exampleDomainLink = \"http://localhost:25555/exampleDotCom\";\n        String\
    \ circular1Link = \"http://localhost:25555/circular1\";\n        String circular2Link\
    \ = \"http://localhost:25555/circular2\";\n        String circular3Link = \"http://localhost:25555/circular3\"\
    ;\n    \n        //Titles\n        String exampleDomainTitle = \"Example Domain\"\
    ;\n        String circular1Title = \"circular1tiTle\";\n        String circular2Title\
    \ = \"circular2tiTle\";\n        String circular3Title = \"circular3tiTle\";\n\
    \    \n        //Contents\n        String exampleDomainContent = \"<!doctype html>\\\
    n\" +\n                \"<html>\\n\" +\n                \"<head>\\n\" +\n    \
    \            \"    <title>Example Domain</title>\\n\" +\n                \"\\\
    n\" +\n                \"    <meta charset=\\\"utf-8\\\" />\\n\" +\n         \
    \       \"    <meta http-equiv=\\\"Content-type\\\" content=\\\"text/html; charset=utf-8\\\
    \" />\\n\" +\n                \"    <meta name=\\\"viewport\\\" content=\\\"width=device-width,\
    \ initial-scale=1\\\" />\\n\" +\n                \"    <style type=\\\"text/css\\\
    \">\\n\" +\n                \"    body {\\n\" +\n                \"        background-color:\
    \ #f0f0f2;\\n\" +\n                \"        margin: 0;\\n\" +\n             \
    \   \"        padding: 0;\\n\" +\n                \"        font-family: \\\"\
    Open Sans\\\", \\\"Helvetica Neue\\\", Helvetica, Arial, sans-serif;\\n\" +\n\
    \                \"\\n\" +\n                \"    }\\n\" +\n                \"\
    \    div {\\n\" +\n                \"        width: 600px;\\n\" +\n          \
    \      \"        margin: 5em auto;\\n\" +\n                \"        padding:\
    \ 50px;\\n\" +\n                \"        background-color: #fff;\\n\" +\n   \
    \             \"        border-radius: 1em;\\n\" +\n                \"    }\\\
    n\" +\n                \"    a:link, a:visited {\\n\" +\n                \"  \
    \      color: #38488f;\\n\" +\n                \"        text-decoration: none;\\\
    n\" +\n                \"    }\\n\" +\n                \"    @media (max-width:\
    \ 700px) {\\n\" +\n                \"        body {\\n\" +\n                \"\
    \            background-color: #fff;\\n\" +\n                \"        }\\n\"\
    \ +\n                \"        div {\\n\" +\n                \"            width:\
    \ auto;\\n\" +\n                \"            margin: 0 auto;\\n\" +\n       \
    \         \"            border-radius: 0;\\n\" +\n                \"         \
    \   padding: 1em;\\n\" +\n                \"        }\\n\" +\n               \
    \ \"    }\\n\" +\n                \"    </style>\\n\" +\n                \"</head>\\\
    n\" +\n                \"\\n\" +\n                \"<body>\\n\" +\n          \
    \      \"<div>\\n\" +\n                \"    <h1>Example of Example Domain</h1>\\\
    n\" +\n                \"    <p>This domain is established to be used for illustrative\
    \ examples in documents. You may use this\\n\" +\n                \"    domain\
    \ in examples without prior coordination or asking for permission.</p>\\n\" +\n\
    \                \"    <p><a href=\\\"unavailablePage\\\">More information...</a></p>\\\
    n\" +\n                \"</div>\\n\" +\n                \"</body>\\n\" +\n   \
    \             \"</html>\";\n    \n        String circular1Content = \"\\n\" +\n\
    \                \"            |<!doctype html>\\n\" +\n                \"   \
    \         |<html>\\n\" +\n                \"            |<head>\\n\" +\n     \
    \           \"            |<title>circular1tiTle</title>\\n\" +\n            \
    \    \"            |</head>\\n\" +\n                \"            |<body>\\n\"\
    \ +\n                \"            |<a href=\\\"circular2\\\">link1</a>\\n\" +\n\
    \                \"            |</body>\\n\" +\n                \"           \
    \ |</html>\\n\" +\n                \"        \";\n    \n        String circular2Content\
    \ = \"\\n\" +\n                \"            |<!doctype html>\\n\" +\n       \
    \         \"            |<html>\\n\" +\n                \"            |<head>\\\
    n\" +\n                \"            |<title>circular2tiTle</title>\\n\" +\n \
    \               \"            |</head>\\n\" +\n                \"            |<body>\\\
    n\" +\n                \"            |<a href=\\\"circular3\\\">link1</a>\\n\"\
    \ +\n                \"            |</body>\\n\" +\n                \"       \
    \     |</html>\\n\" +\n                \"        \";\n    \n        String circular3Content\
    \ = \"\\n\" +\n                \"            |<!doctype html>\\n\" +\n       \
    \         \"            |<html>\\n\" +\n                \"            |<head>\\\
    n\" +\n                \"            |<title>circular3tiTle</title>\\n\" +\n \
    \               \"            |</head>\\n\" +\n                \"            |<body>\\\
    n\" +\n                \"            |<a href=\\\"circular1\\\">link</a>\\n\"\
    \ +\n                \"            |<a href=\\\"exampleDotCom\\\">link</a>\\n\"\
    \ +\n                \"            |</body>\\n\" +\n                \"       \
    \     |</html>\\n\" +\n                \"        \";\n    \n        linksNContent.put(exampleDomainLink,\
    \ exampleDomainContent);\n        linksNContent.put(circular1Link, circular1Content);\n\
    \        linksNContent.put(circular2Link, circular2Content);\n        linksNContent.put(circular3Link,\
    \ circular3Content);\n    \n        linksNTitles.put(exampleDomainLink, exampleDomainTitle);\n\
    \        linksNTitles.put(circular1Link, circular1Title);\n        linksNTitles.put(circular2Link,\
    \ circular2Title);\n        linksNTitles.put(circular3Link, circular3Title);\n\
    \        \n        linksNSubLinks.put(exampleDomainLink, 1);\n        linksNSubLinks.put(circular1Link,\
    \ 2);\n        linksNSubLinks.put(circular2Link, 2);\n        linksNSubLinks.put(circular3Link,\
    \ 3);\n    }\n    \n    public Map<String, String> getLinksNTitles(){return linksNTitles;}\n\
    \    public int getSubLinksWithLink(String link){return linksNSubLinks.getOrDefault(link,\
    \ 0);}\n    public String getContentWithLink(String link){\n        return linksNContent.getOrDefault(link,\
    \ \"\");\n    }\n    public String getTitleWithLink(String link){\n        return\
    \ linksNTitles.getOrDefault(link, \"\");\n    }\n}\n"
  learner_created: false
- name: test/CrawlerTest.java
  visible: false
  text: |
    import crawler.WebCrawler;
    import org.assertj.swing.fixture.JButtonFixture;
    import org.assertj.swing.fixture.JLabelFixture;
    import org.assertj.swing.fixture.JTableFixture;
    import org.assertj.swing.fixture.JTextComponentFixture;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.mocks.web.WebPage;
    import org.hyperskill.hstest.mocks.web.WebServerMock;
    import org.hyperskill.hstest.stage.SwingTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.swing.SwingComponent;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import javax.swing.*;
    import java.awt.*;
    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;
    import java.util.Map;

    public class CrawlerTest extends SwingTest {

        private static WebServerMock webServerMock;
        private static PageContent pageContent;
        private static final int PORT = 25555;
        private static List<String> parsedPages;

        Map<String, String> mapOfLinksNTitles = pageContent.getLinksNTitles();


        public CrawlerTest() {
            super(new WebCrawler());
        }

        @BeforeClass
        public static void initWebServer() {
            System.out.println("Initializing server");
            pageContent = new PageContent();
            parsedPages = new ArrayList<>();

            WebPage exampleDotComPage = new WebPage();
            exampleDotComPage.setContent(pageContent.getContentWithLink("http://localhost:25555/exampleDotCom"));
            exampleDotComPage.setContentType("text/html");

            WebPage circular1Page = new WebPage();
            circular1Page.setContent(pageContent.getContentWithLink("http://localhost:25555/circular1"));
            circular1Page.setContentType("text/html");

            WebPage circular2Page = new WebPage();
            circular2Page.setContent(pageContent.getContentWithLink("http://localhost:25555/circular2"));
            circular2Page.setContentType("text/html");

            WebPage circular3Page = new WebPage();
            circular3Page.setContent(pageContent.getContentWithLink("http://localhost:25555/circular3"));
            circular3Page.setContentType("text/html");

            WebPage unavailablePage = new WebPage();
            unavailablePage.setContent("Web Page not found");

            webServerMock = new WebServerMock(PORT);
            webServerMock.setPage("/exampleDotCom", exampleDotComPage);
            webServerMock.setPage("/circular1", circular1Page);
            webServerMock.setPage("/circular2", circular2Page);
            webServerMock.setPage("/circular3", circular3Page);
            webServerMock.setPage("/unavailablePage", unavailablePage);

            Thread thread = new Thread(() -> {
                webServerMock.start();
                webServerMock.run();
            });

            thread.start();

        }

        @AfterClass
        public static void stopServer() {
            System.out.println("Stopping server");
            webServerMock.stop();
        }

        @SwingComponent(name = "TitlesTable")
        JTableFixture titlesTable;

        @SwingComponent(name = "UrlTextField")
        JTextComponentFixture textField;

        @SwingComponent(name = "RunButton")
        JButtonFixture runButton;

        @SwingComponent(name = "TitleLabel")
        JLabelFixture titleLabel;

        @DynamicTest(order = 1, feedback = "TitlesTable should have 2 columns")
        CheckResult testComponents() {

            requireVisible(textField);
            requireVisible(runButton);
            requireVisible(titleLabel);
            requireVisible(titlesTable);


            requireEnabled(textField);
            requireEnabled(runButton);
            requireEnabled(titleLabel);

            requireDisabled(titlesTable);
            titlesTable.requireColumnCount(2);

            return CheckResult.correct();
        }

        @DynamicTest(order = 2)
        CheckResult testTableContainer() {
            boolean containsJTable = false;
            Component[] frameComponents = frame.getContentPane().getComponents();
            for (Component c : frameComponents) {
                if (c instanceof JScrollPane) {
                    Component[] scrollPaneComponents = ((JScrollPane) c).getViewport().getComponents();
                    for (Component s: scrollPaneComponents) {
                        if (s instanceof JTable) {
                            containsJTable = true;
                            break;
                        }
                    }
                }
            }

            if (!containsJTable) {
                return CheckResult.wrong("Titles Table should be placed inside a JScrollPane");
            }

            return  CheckResult.correct();
        }


        @DynamicTest(order = 3)
        CheckResult testTitles() {


            for (Map.Entry<String, String> m : mapOfLinksNTitles.entrySet()) {
                String link = m.getKey();
                textField.setText(link);
                runButton.click();
                String title = pageContent.getTitleWithLink(link);
                if (!titleLabel.text().equals(title)) {
                    return CheckResult.wrong("TitleLabel shows the wrong title");
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 4)
        CheckResult testTitlesTable() {


            Map<String, String> mapOfLinksNTitles = pageContent.getLinksNTitles();

            for (Map.Entry<String, String> m : mapOfLinksNTitles.entrySet()) {
                String link = m.getKey();
                textField.setText(link);
                runButton.click();
                boolean validContent = checkTableContent(true);
                if (!validContent) {
                    return CheckResult.wrong("TitlesTable contains link(s) that is neither a base link nor a sub-link");
                }
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult testTitlesTableForWrongLinks() {

            for (Map.Entry<String, String> m : mapOfLinksNTitles.entrySet()) {
                String link = m.getKey();
                textField.setText(link);
                runButton.click();
                boolean validContent = checkTableContent(false);
                if (!validContent) {
                    return CheckResult.wrong("TitlesTable contains wrong link and title pair after parsing.");
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult testForDoubleLinks() {

            for (Map.Entry<String, String> m : mapOfLinksNTitles.entrySet()) {
                String link = m.getKey();
                textField.setText(link);
                runButton.click();
                boolean doubleLinks = checkForDoubleLinks();
                if (doubleLinks) {
                    return CheckResult.wrong("You shouldn't save a links that you have previously saved");
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 7)
        CheckResult testForUnavailableLinks() {

            for (Map.Entry<String, String> m : mapOfLinksNTitles.entrySet()) {
                String link = (String) m.getKey();
                textField.setText(link);
                runButton.click();
                boolean validContent = checkForUnavailablePage();
                if (!validContent) {
                    return CheckResult.wrong("TitlesTable shows a link to the page that is unavailable." +
                        " You shouldn't add to the table unavailable links.");
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 8)
        CheckResult testForRowNumber() {

            for (Map.Entry<String, String> m : mapOfLinksNTitles.entrySet()) {
                String link = m.getKey();
                textField.setText(link);
                runButton.click();
                int numOfSubLinks = pageContent.getSubLinksWithLink(link);
                if (numOfSubLinks != titlesTable.rowCount()) {
                    return CheckResult.wrong("TitlesTable has wrong number of rows after parsing.\n" +
                        "Expected: " + numOfSubLinks + ".\nFound: " + titlesTable.rowCount());
                }
            }

            return CheckResult.correct();
        }

        private boolean checkTableContent(boolean testForValidLinks) {
            String[][] tableContent = titlesTable.contents();

            if (testForValidLinks) {
                for (String[] s : tableContent) {
                    for (int j = 0; j < tableContent[0].length; j++) {
                        String tableLink = s[0];
                        if (!mapOfLinksNTitles.containsKey(tableLink)) {
                            return false;
                        }
                    }
                }
            } else {
                for (String[] s : tableContent) {
                    for (int j = 0; j < tableContent[0].length; j++) {
                        String tableTitle = s[1];
                        String originalTitle = pageContent.getTitleWithLink(s[0]);
                        if (!tableTitle.equals(originalTitle)) {
                            return false;
                        }
                    }
                }
            }
            return true;
        }

        private boolean checkForDoubleLinks() {
            parsedPages.clear();

            String[][] tableContent = titlesTable.contents();
            for (String[] s : tableContent) {
                String link = s[0];
                System.out.println(link);
                if (parsedPages.contains(link)) {
                    return true;
                }
                parsedPages.add(link);
            }
            return false;
        }

        private boolean checkForUnavailablePage() {
            String[][] tableContent = titlesTable.contents();
            for (String[] s : tableContent) {
                for (int i = 0; i < s.length; i += 2) {
                    if (!mapOfLinksNTitles.containsKey(s[i])) {
                        return false;
                    }
                }
            }
            return true;
        }
    }
  learner_created: false
- name: src/crawler/webCrawler.png
  visible: true
  text: 
  learner_created: true
- name: src/crawler/HtmlCodeViewer.java
  visible: true
  text: "/*\n * Created by JFormDesigner on Tue Mar 08 03:33:34 EET 2022\n */\n\n\
    package crawler;\n\nimport java.awt.*;\nimport java.awt.event.*;\nimport javax.swing.*;\n\
    \n/**\n * @author unknown\n */\npublic class HtmlCodeViewer extends JPanel {\n\
    \    public HtmlCodeViewer() {\n        initComponents();\n    }\n\n    private\
    \ void run() {\n        // TODO add your code here\n    }\n\n    private void\
    \ run(ActionEvent e) {\n        // TODO add your code here\n    }\n\n    private\
    \ void initComponents() {\n        // JFormDesigner - Component initialization\
    \ - DO NOT MODIFY  //GEN-BEGIN:initComponents\n        urlPanel = new JPanel();\n\
    \        urlTextField = new JTextField();\n        runButton = new JButton();\n\
    \        htmlPanel = new JPanel();\n        titlePanel = new JPanel();\n     \
    \   title = new JLabel();\n        titleLabel = new JLabel();\n        textAreaScrollPane\
    \ = new JScrollPane();\n        htmlTextArea = new JTextArea();\n\n        //========\
    \ this ========\n        setPreferredSize(new Dimension(700, 350));\n        setMinimumSize(new\
    \ Dimension(700, 350));\n        setLayout(new BorderLayout(0, 2));\n\n      \
    \  //======== urlPanel ========\n        {\n            urlPanel.setMinimumSize(new\
    \ Dimension(730, 50));\n            urlPanel.setPreferredSize(new Dimension(730,\
    \ 50));\n            urlPanel.setBackground(Color.black);\n            urlPanel.setForeground(Color.white);\n\
    \            urlPanel.setName(\"urlPanel\");\n            urlPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n\
    \            urlPanel.setLayout(new GridLayout(1, 2));\n\n            //---- urlTextField\
    \ ----\n            urlTextField.setName(\"UrlTextField\");\n            urlTextField.setCaretColor(new\
    \ Color(0, 204, 204));\n            urlTextField.setForeground(Color.white);\n\
    \            urlTextField.setDisabledTextColor(new Color(153, 153, 153));\n  \
    \          urlTextField.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n\
    \            urlTextField.setFont(new Font(\"JetBrains Mono\", Font.PLAIN, 12));\n\
    \            urlTextField.setPreferredSize(new Dimension(700, 45));\n        \
    \    urlTextField.setMinimumSize(new Dimension(700, 45));\n            urlTextField.setHorizontalAlignment(SwingConstants.LEFT);\n\
    \            urlTextField.setText(\"http://example.com\");\n            urlTextField.setToolTipText(\"\
    URL\");\n            urlTextField.setSelectionEnd(26);\n            urlTextField.setSelectionStart(7);\n\
    \            urlTextField.setBorder(null);\n            urlTextField.setBackground(Color.black);\n\
    \            urlTextField.setMargin(new Insets(0, 5, 0, 0));\n            urlPanel.add(urlTextField);\n\
    \n            //---- runButton ----\n            runButton.setText(\"Get text!\"\
    );\n            runButton.setPreferredSize(new Dimension(100, 30));\n        \
    \    runButton.setMaximumSize(new Dimension(100, 30));\n            runButton.setMinimumSize(new\
    \ Dimension(100, 30));\n            runButton.setBorder(null);\n            runButton.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n\
    \            runButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));\n\
    \            runButton.setDefaultCapable(false);\n            runButton.setName(\"\
    RunButton\");\n            runButton.setHorizontalTextPosition(SwingConstants.CENTER);\n\
    \            runButton.setFocusable(false);\n            runButton.setBackground(Color.black);\n\
    \            runButton.setForeground(Color.white);\n            runButton.addActionListener(e\
    \ -> {\n\t\t\trun(e);\n\t\t\trun();\n\t\t});\n            urlPanel.add(runButton);\n\
    \        }\n        add(urlPanel, BorderLayout.PAGE_START);\n\n        //========\
    \ htmlPanel ========\n        {\n            htmlPanel.setMinimumSize(new Dimension(820,\
    \ 100));\n            htmlPanel.setPreferredSize(new Dimension(820, 100));\n \
    \           htmlPanel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n\
    \            htmlPanel.setBackground(Color.black);\n            htmlPanel.setForeground(Color.white);\n\
    \            htmlPanel.setLayout(new BorderLayout());\n\n            //========\
    \ titlePanel ========\n            {\n                titlePanel.setBackground(Color.black);\n\
    \                titlePanel.setLayout(new BoxLayout(titlePanel, BoxLayout.X_AXIS));\n\
    \n                //---- title ----\n                title.setText(\"Title:  \
    \  \");\n                title.setMaximumSize(new Dimension(50, 16));\n      \
    \          title.setMinimumSize(new Dimension(50, 40));\n                title.setPreferredSize(new\
    \ Dimension(37, 40));\n                title.setForeground(Color.white);\n   \
    \             titlePanel.add(title);\n\n                //---- titleLabel ----\n\
    \                titleLabel.setHorizontalAlignment(SwingConstants.LEFT);\n   \
    \             titleLabel.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n\
    \                titleLabel.setBorder(null);\n                titleLabel.setPreferredSize(new\
    \ Dimension(7200, 40));\n                titleLabel.setMinimumSize(new Dimension(720,\
    \ 40));\n                titleLabel.setMaximumSize(new Dimension(0, 40));\n  \
    \              titleLabel.setName(\"TitleLabel\");\n                titleLabel.setForeground(Color.white);\n\
    \                titlePanel.add(titleLabel);\n            }\n            htmlPanel.add(titlePanel,\
    \ BorderLayout.NORTH);\n\n            //======== textAreaScrollPane ========\n\
    \            {\n                textAreaScrollPane.setViewportBorder(null);\n\
    \                textAreaScrollPane.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n\
    \                textAreaScrollPane.setMinimumSize(new Dimension(730, 300));\n\
    \                textAreaScrollPane.setPreferredSize(new Dimension(730, 300));\n\
    \                textAreaScrollPane.setBackground(new Color(65, 53, 53));\n  \
    \              textAreaScrollPane.setToolTipText(\"HTML Code\");\n           \
    \     textAreaScrollPane.setAutoscrolls(true);\n                textAreaScrollPane.setBorder(null);\n\
    \                textAreaScrollPane.setAlignmentX(5.0F);\n                textAreaScrollPane.setAlignmentY(5.0F);\n\
    \n                //---- htmlTextArea ----\n                htmlTextArea.setBackground(Color.black);\n\
    \                htmlTextArea.setToolTipText(\"HTML code?\");\n              \
    \  htmlTextArea.setComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n\
    \                htmlTextArea.setForeground(Color.white);\n                htmlTextArea.setTabSize(4);\n\
    \                htmlTextArea.setText(\"HTML code?\");\n                htmlTextArea.setDisabledTextColor(new\
    \ Color(153, 153, 153));\n                htmlTextArea.setCaretColor(new Color(0,\
    \ 204, 204));\n                htmlTextArea.setLineWrap(true);\n             \
    \   htmlTextArea.setEnabled(false);\n                htmlTextArea.setName(\"HtmlTextArea\"\
    );\n                htmlTextArea.setAlignmentX(5.0F);\n                htmlTextArea.setAlignmentY(5.0F);\n\
    \                htmlTextArea.setBorder(null);\n                htmlTextArea.setMargin(new\
    \ Insets(5, 5, 5, 5));\n                htmlTextArea.setSelectedTextColor(new\
    \ Color(102, 255, 255));\n                textAreaScrollPane.setViewportView(htmlTextArea);\n\
    \            }\n            htmlPanel.add(textAreaScrollPane, BorderLayout.CENTER);\n\
    \        }\n        add(htmlPanel, BorderLayout.CENTER);\n        // JFormDesigner\
    \ - End of component initialization  //GEN-END:initComponents\n\n        textAreaScrollPane.getVerticalScrollBar().setBackground(Color.BLACK);\n\
    \        textAreaScrollPane.getHorizontalScrollBar().setBackground(Color.BLACK);\n\
    \    }\n\n    // JFormDesigner - Variables declaration - DO NOT MODIFY  //GEN-BEGIN:variables\n\
    \    private JPanel urlPanel;\n    private JTextField urlTextField;\n    private\
    \ transient JButton runButton;\n    private JPanel htmlPanel;\n    private JPanel\
    \ titlePanel;\n    private JLabel title;\n    private JLabel titleLabel;\n   \
    \ private JScrollPane textAreaScrollPane;\n    private JTextArea htmlTextArea;\n\
    \    // JFormDesigner - End of variables declaration  //GEN-END:variables\n\n\n\
    \    public JButton getRunButton() {\n        return runButton;\n    }\n\n   \
    \ public JTextField getUrlTextField() {\n        return urlTextField;\n    }\n\
    \n    public JTextArea getHtmlTextArea() {\n        return htmlTextArea;\n   \
    \ }\n\n    public JLabel getTitleLabel() {\n        return titleLabel;\n    }\n\
    }\n"
  learner_created: true
- name: src/crawler/HtmlCodeViewer.jfd
  visible: true
  text: "JFDML JFormDesigner: \"7.0.5.3.411\" Java: \"11.0.13\" encoding: \"UTF-8\"\
    \n\nnew FormModel {\n\tcontentType: \"form/swing\"\n\troot: new FormRoot {\n\t\
    \tadd( new FormContainer( \"javax.swing.JPanel\", new FormLayoutManager( class\
    \ java.awt.BorderLayout ) {\n\t\t\t\"vgap\": 2\n\t\t} ) {\n\t\t\tname: \"this\"\
    \n\t\t\t\"preferredSize\": new java.awt.Dimension( 700, 350 )\n\t\t\t\"minimumSize\"\
    : new java.awt.Dimension( 700, 350 )\n\t\t\tadd( new FormContainer( \"javax.swing.JPanel\"\
    , new FormLayoutManager( class java.awt.GridLayout ) {\n\t\t\t\t\"columns\": 2\n\
    \t\t\t} ) {\n\t\t\t\tname: \"urlPanel\"\n\t\t\t\t\"minimumSize\": new java.awt.Dimension(\
    \ 730, 50 )\n\t\t\t\t\"preferredSize\": new java.awt.Dimension( 730, 50 )\n\t\t\
    \t\t\"background\": sfield java.awt.Color black\n\t\t\t\t\"foreground\": sfield\
    \ java.awt.Color white\n\t\t\t\t\"name\": \"urlPanel\"\n\t\t\t\t\"componentOrientation\"\
    : sfield java.awt.ComponentOrientation LEFT_TO_RIGHT\n\t\t\t\tadd( new FormComponent(\
    \ \"javax.swing.JTextField\" ) {\n\t\t\t\t\tname: \"urlTextField\"\n\t\t\t\t\t\
    \"name\": \"UrlTextField\"\n\t\t\t\t\t\"caretColor\": new java.awt.Color( 0, 204,\
    \ 204, 255 )\n\t\t\t\t\t\"foreground\": sfield java.awt.Color white\n\t\t\t\t\t\
    \"disabledTextColor\": new java.awt.Color( 153, 153, 153, 255 )\n\t\t\t\t\t\"\
    componentOrientation\": sfield java.awt.ComponentOrientation LEFT_TO_RIGHT\n\t\
    \t\t\t\t\"font\": new java.awt.Font( \"JetBrains Mono\", 0, 12 )\n\t\t\t\t\t\"\
    preferredSize\": new java.awt.Dimension( 700, 45 )\n\t\t\t\t\t\"minimumSize\"\
    : new java.awt.Dimension( 700, 45 )\n\t\t\t\t\t\"horizontalAlignment\": 2\n\t\t\
    \t\t\t\"text\": \"http://example.com\"\n\t\t\t\t\t\"toolTipText\": \"URL\"\n\t\
    \t\t\t\t\"selectionEnd\": 26\n\t\t\t\t\t\"selectionStart\": 7\n\t\t\t\t\t\"border\"\
    : sfield com.jformdesigner.model.FormObject NULL_VALUE\n\t\t\t\t\t\"background\"\
    : sfield java.awt.Color black\n\t\t\t\t\t\"margin\": new java.awt.Insets( 0, 5,\
    \ 0, 0 )\n\t\t\t\t} )\n\t\t\t\tadd( new FormComponent( \"javax.swing.JButton\"\
    \ ) {\n\t\t\t\t\tname: \"runButton\"\n\t\t\t\t\t\"text\": \"Get text!\"\n\t\t\t\
    \t\t\"preferredSize\": new java.awt.Dimension( 100, 30 )\n\t\t\t\t\t\"maximumSize\"\
    : new java.awt.Dimension( 100, 30 )\n\t\t\t\t\t\"minimumSize\": new java.awt.Dimension(\
    \ 100, 30 )\n\t\t\t\t\t\"border\": sfield com.jformdesigner.model.FormObject NULL_VALUE\n\
    \t\t\t\t\t\"componentOrientation\": sfield java.awt.ComponentOrientation LEFT_TO_RIGHT\n\
    \t\t\t\t\t\"cursor\": new java.awt.Cursor( 12 )\n\t\t\t\t\t\"defaultCapable\"\
    : false\n\t\t\t\t\t\"name\": \"RunButton\"\n\t\t\t\t\t\"horizontalTextPosition\"\
    : 0\n\t\t\t\t\t\"focusable\": false\n\t\t\t\t\t\"background\": sfield java.awt.Color\
    \ black\n\t\t\t\t\t\"foreground\": sfield java.awt.Color white\n\t\t\t\t\tauxiliary()\
    \ {\n\t\t\t\t\t\t\"JavaCodeGenerator.variableModifiers\": 130\n\t\t\t\t\t}\n\t\
    \t\t\t\taddEvent( new FormEvent( \"java.awt.event.ActionListener\", \"actionPerformed\"\
    , \"run\", true ) )\n\t\t\t\t\taddEvent( new FormEvent( \"java.awt.event.ActionListener\"\
    , \"actionPerformed\", \"run\", false ) )\n\t\t\t\t} )\n\t\t\t}, new FormLayoutConstraints(\
    \ class java.lang.String ) {\n\t\t\t\t\"value\": \"First\"\n\t\t\t} )\n\t\t\t\
    add( new FormContainer( \"javax.swing.JPanel\", new FormLayoutManager( class java.awt.BorderLayout\
    \ ) ) {\n\t\t\t\tname: \"htmlPanel\"\n\t\t\t\t\"minimumSize\": new java.awt.Dimension(\
    \ 820, 100 )\n\t\t\t\t\"preferredSize\": new java.awt.Dimension( 820, 100 )\n\t\
    \t\t\t\"componentOrientation\": sfield java.awt.ComponentOrientation LEFT_TO_RIGHT\n\
    \t\t\t\t\"background\": sfield java.awt.Color black\n\t\t\t\t\"foreground\": sfield\
    \ java.awt.Color white\n\t\t\t\tadd( new FormContainer( \"javax.swing.JPanel\"\
    , new FormLayoutManager( class javax.swing.BoxLayout ) ) {\n\t\t\t\t\tname: \"\
    titlePanel\"\n\t\t\t\t\t\"background\": sfield java.awt.Color black\n\t\t\t\t\t\
    add( new FormComponent( \"javax.swing.JLabel\" ) {\n\t\t\t\t\t\tname: \"title\"\
    \n\t\t\t\t\t\t\"text\": \"Title:    \"\n\t\t\t\t\t\t\"maximumSize\": new java.awt.Dimension(\
    \ 50, 16 )\n\t\t\t\t\t\t\"minimumSize\": new java.awt.Dimension( 50, 40 )\n\t\t\
    \t\t\t\t\"preferredSize\": new java.awt.Dimension( 37, 40 )\n\t\t\t\t\t\t\"foreground\"\
    : sfield java.awt.Color white\n\t\t\t\t\t} )\n\t\t\t\t\tadd( new FormComponent(\
    \ \"javax.swing.JLabel\" ) {\n\t\t\t\t\t\tname: \"titleLabel\"\n\t\t\t\t\t\t\"\
    horizontalAlignment\": 2\n\t\t\t\t\t\t\"componentOrientation\": sfield java.awt.ComponentOrientation\
    \ LEFT_TO_RIGHT\n\t\t\t\t\t\t\"border\": sfield com.jformdesigner.model.FormObject\
    \ NULL_VALUE\n\t\t\t\t\t\t\"preferredSize\": new java.awt.Dimension( 7200, 40\
    \ )\n\t\t\t\t\t\t\"minimumSize\": new java.awt.Dimension( 720, 40 )\n\t\t\t\t\t\
    \t\"maximumSize\": new java.awt.Dimension( 0, 40 )\n\t\t\t\t\t\t\"name\": \"TitleLabel\"\
    \n\t\t\t\t\t\t\"foreground\": sfield java.awt.Color white\n\t\t\t\t\t} )\n\t\t\
    \t\t}, new FormLayoutConstraints( class java.lang.String ) {\n\t\t\t\t\t\"value\"\
    : \"North\"\n\t\t\t\t} )\n\t\t\t\tadd( new FormContainer( \"javax.swing.JScrollPane\"\
    , new FormLayoutManager( class javax.swing.JScrollPane ) ) {\n\t\t\t\t\tname:\
    \ \"textAreaScrollPane\"\n\t\t\t\t\t\"viewportBorder\": sfield com.jformdesigner.model.FormObject\
    \ NULL_VALUE\n\t\t\t\t\t\"componentOrientation\": sfield java.awt.ComponentOrientation\
    \ LEFT_TO_RIGHT\n\t\t\t\t\t\"minimumSize\": new java.awt.Dimension( 730, 300 )\n\
    \t\t\t\t\t\"preferredSize\": new java.awt.Dimension( 730, 300 )\n\t\t\t\t\t\"\
    background\": new java.awt.Color( 65, 53, 53, 255 )\n\t\t\t\t\t\"toolTipText\"\
    : \"HTML Code\"\n\t\t\t\t\t\"autoscrolls\": true\n\t\t\t\t\t\"border\": sfield\
    \ com.jformdesigner.model.FormObject NULL_VALUE\n\t\t\t\t\t\"alignmentX\": 5.0f\n\
    \t\t\t\t\t\"alignmentY\": 5.0f\n\t\t\t\t\tadd( new FormComponent( \"javax.swing.JTextArea\"\
    \ ) {\n\t\t\t\t\t\tname: \"htmlTextArea\"\n\t\t\t\t\t\t\"background\": sfield\
    \ java.awt.Color black\n\t\t\t\t\t\t\"toolTipText\": \"HTML code?\"\n\t\t\t\t\t\
    \t\"componentOrientation\": sfield java.awt.ComponentOrientation LEFT_TO_RIGHT\n\
    \t\t\t\t\t\t\"foreground\": sfield java.awt.Color white\n\t\t\t\t\t\t\"tabSize\"\
    : 4\n\t\t\t\t\t\t\"text\": \"HTML code?\"\n\t\t\t\t\t\t\"disabledTextColor\":\
    \ new java.awt.Color( 153, 153, 153, 255 )\n\t\t\t\t\t\t\"caretColor\": new java.awt.Color(\
    \ 0, 204, 204, 255 )\n\t\t\t\t\t\t\"lineWrap\": true\n\t\t\t\t\t\t\"enabled\"\
    : false\n\t\t\t\t\t\t\"name\": \"HtmlTextArea\"\n\t\t\t\t\t\t\"alignmentX\": 5.0f\n\
    \t\t\t\t\t\t\"alignmentY\": 5.0f\n\t\t\t\t\t\t\"border\": sfield com.jformdesigner.model.FormObject\
    \ NULL_VALUE\n\t\t\t\t\t\t\"margin\": new java.awt.Insets( 5, 5, 5, 5 )\n\t\t\t\
    \t\t\t\"selectedTextColor\": new java.awt.Color( 102, 255, 255, 255 )\n\t\t\t\t\
    \t} )\n\t\t\t\t}, new FormLayoutConstraints( class java.lang.String ) {\n\t\t\t\
    \t\t\"value\": \"Center\"\n\t\t\t\t} )\n\t\t\t}, new FormLayoutConstraints( class\
    \ java.lang.String ) {\n\t\t\t\t\"value\": \"Center\"\n\t\t\t} )\n\t\t}, new FormLayoutConstraints(\
    \ null ) {\n\t\t\t\"location\": new java.awt.Point( 45, 35 )\n\t\t\t\"size\":\
    \ new java.awt.Dimension( 820, 520 )\n\t\t} )\n\t}\n}\n"
  learner_created: true
- name: src/crawler/UrlExtractor.java
  visible: true
  text: |
    package crawler;

    import java.net.URI;
    import java.net.http.HttpClient;
    import java.net.http.HttpRequest;
    import java.net.http.HttpResponse;

    public class HTMLCodeDownloader {
        private HTMLCodeDownloader() {
            throw new IllegalStateException("HTMLCodeDownloader class");
        }

        public static String getCode(String url) {
            HttpClient httpClient = HttpClient.newHttpClient();

            URI firstWebSiteAddress = URI.create(url);

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(firstWebSiteAddress)
                    .build();

            try {
                HttpResponse<String> response = httpClient.send(
                        request, HttpResponse.BodyHandlers.ofString());

                return response.body();
            } catch (Exception e) {
                return "We cannot access the site. Please, try later.";
            }
        }
    }
  learner_created: true
- name: src/crawler/UrlTitleTableModel.java
  visible: true
  learner_created: true
- name: src/crawler/TitleTable.jfd
  visible: true
  learner_created: true
- name: src/crawler/TitleTable.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5462#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 10 Mar 2022 01:51:54 UTC
record: 4
